{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OakVar: Genomic Variant Analysis Platform","text":"<ul> <li>Annotate genomic variants with diverse annotation sources.</li> <li>Make databases of annotated variants.</li> <li>Query annotated variants with filter sets.</li> <li>Make reports in diverse formats.</li> <li>Visualize annotated variants with graphical user interface.</li> <li>Works via CLI and GUI.</li> <li>Easily develop, run, and distribute CLI and GUI genomics apps. OakVar acts as an operating system for genomics apps.</li> <li>Connect genomic data to AI/ML models.</li> </ul> <p>OakVar is a genomic variant interpretation platform. Genomic variants can be annotated with diverse annotation sources, stored in databases, queried with filter sets, written to reports in diverse formats, and visualized with graphical user interfaces. Furthermore, OakVar supports command-line and graphical user interface apps which use the annotated variant data generated by OakVar, just like an operating system supports applications on it.</p>"},{"location":"cli/","title":"CLI Commands","text":""},{"location":"cli/#setup","title":"Setup","text":"<pre><code>ov system setup\n</code></pre>"},{"location":"cli/#run-an-analysis-job","title":"Run an analysis job","text":"<pre><code>ov run\n</code></pre>"},{"location":"cli/#create-annotation-reports","title":"Create annotation reports","text":"<pre><code>ov report\n</code></pre>"},{"location":"cli/#launch-a-gui-server","title":"Launch a GUI server","text":"<pre><code>ov gui\n</code></pre>"},{"location":"cli/#manage-modules","title":"Manage modules","text":""},{"location":"cli/#list-modules","title":"List modules","text":"<pre><code>ov module ls\n</code></pre>"},{"location":"cli/#install-modules","title":"Install modules","text":"<pre><code>ov module install\n</code></pre>"},{"location":"cli/#uninstall-modules","title":"Uninstall modules","text":"<pre><code>ov module uninstall\n</code></pre>"},{"location":"cli/#install-system-modules","title":"Install system modules","text":"<pre><code>ov module installbase\n</code></pre>"},{"location":"cli/#update-modules","title":"Update modules","text":"<pre><code>ov module update\n</code></pre>"},{"location":"cli/#get-information-on-modules","title":"Get information on modules","text":"<pre><code>ov module info\n</code></pre>"},{"location":"cli/#manage-store-accounts","title":"Manage store accounts","text":""},{"location":"cli/#create-a-store-account","title":"Create a store account","text":"<pre><code>ov store account create\n</code></pre>"},{"location":"cli/#delete-a-store-account","title":"Delete a store account","text":"<pre><code>ov store account delete\n</code></pre>"},{"location":"cli/#change-a-store-account-password","title":"Change a store account password","text":"<pre><code>ov store account change\n</code></pre>"},{"location":"cli/#check-if-logged-in-on-the-oakvar-store","title":"Check if logged in on the OakVar store","text":"<pre><code>ov store account check\n</code></pre>"},{"location":"cli/#log-in-on-the-oakvar-store","title":"Log in on the OakVar store","text":"<pre><code>ov store account login\n</code></pre>"},{"location":"cli/#log-out-from-the-oakvar-store","title":"Log out from the OakVar store","text":"<pre><code>ov store account logout\n</code></pre>"},{"location":"cli/#reset-the-password-of-a-store-account","title":"Reset the password of a store account","text":"<pre><code>ov store account reset\n</code></pre>"},{"location":"cli/#publish-modules","title":"Publish modules","text":""},{"location":"cli/#pack-a-module-for-registering-at-the-oakvar-store","title":"Pack a module for registering at the OakVar store","text":"<pre><code>ov module pack\n</code></pre>"},{"location":"cli/#register-a-module-at-the-oakvar-store","title":"Register a module at the OakVar store","text":"<pre><code>ov store register\n</code></pre>"},{"location":"cli/#manage-configuration","title":"Manage configuration","text":""},{"location":"cli/#manage-modules-directory","title":"Manage modules directory","text":"<pre><code>ov system md\n</code></pre>"},{"location":"cli/#show-system-configuration","title":"Show system configuration","text":"<pre><code>ov config system\n</code></pre>"},{"location":"cli/#show-user-configuration","title":"Show user configuration","text":"<pre><code>ov config user\n</code></pre>"},{"location":"cli/#test-modules","title":"Test modules","text":"<pre><code>ov util test\n</code></pre>"},{"location":"cli/#utilities","title":"Utilities","text":""},{"location":"cli/#create-an-example-input-file","title":"Create an example input file","text":"<pre><code>ov new exampleinput\n</code></pre>"},{"location":"cli/#create-an-annotation-module-template","title":"Create an annotation module template","text":"<pre><code>ov new annotator\n</code></pre>"},{"location":"cli/#merge-analysis-result-database-files","title":"Merge analysis result database files","text":"<pre><code>ov util mergesqlite\n</code></pre>"},{"location":"cli/#filter-analysis-result-database-files","title":"Filter analysis result database files","text":"<pre><code>ov util filtersqlite\n</code></pre>"},{"location":"cli/#show-analysis-result-database-file-information","title":"Show analysis result database file information","text":"<pre><code>ov util sqliteinfo --fmt [json(default)|yaml|text]\n</code></pre>"},{"location":"devguide_debugging/","title":"Debugging","text":""},{"location":"devguide_debugging/#entrypoints","title":"Entrypoints","text":"Command Entrypoint ov oakvar/__main__.py ov run oakvar/cli/run.py ov report oakvar/cli/report.py ov gui oakvar/cli/gui.py <p>oakvar/__main__.py is intentional, to make <code>python -m oakvar</code> style of use possible.</p>"},{"location":"devguide_debugging/#base-classes","title":"Base classes","text":"<p>OakVar modules inherit one of OakVar base module classes. Converters, mappers, annotators, postaggregators, and reporters have different base module classes.</p> Type Module Class converter oakvar/base/converter.py BaseConverter mapper oakvar/base/mapper.py BaseMapper annotator oakvar/base/annotator.py BaseAnnotator postaggregator oakvar/base/postaggregator.py BasePostAggregator reporter oakvar/cli/report.py BaseReporter common oakvar/base/commonmodule.py BaseCommonModule <p>To develop a new OakVar module, it should inherit one of these base classes. For example, an annotator module's class definition should be:</p> <pre><code>from oakvar import BaseAnnotator\n\nclass Annotator(BaseAnnotator):\n</code></pre>"},{"location":"devguide_modules/","title":"Modules","text":"<p>OakVar's functionalities are mostly performed by Python modules. OakVar orchestrates their execution as well as their management.</p> <p>To understand OakVar's modules, let's first see which modules are already installed in the system.</p> <pre><code>ov module ls\n</code></pre> <p>This will show a list of modules installed in the system. These modules are stored under OakVar modules directory, which can be found with </p> <pre><code>ov system md\n</code></pre> <p>Inside the modules directory, there are subdirectories such as the following.</p> <pre><code>annotators\ncommons\nconverters\nmappers\npostaggregators\nreporters\nwebapps\nwebviewerwidgets\n</code></pre> <p>Each subdirectory represents a type of OakVar module. Inside each type subdirectory, another level of subdirectories exist for the modules of the type directory. For example, in <code>reporter</code> module type directory, the following subdirectories may exist, which correspond to the reporter modules in the system.</p> <pre><code>csvreporter\nexcelreporter\nstdoutreporter\ntextreporter\ntsvreporter\nvcfreporter\n</code></pre>"},{"location":"devguide_modules/#anatomy-of-a-module","title":"Anatomy of a module","text":"<p>Details of a specific module can be shown with <code>ov module info</code>. Let's take a look at the information of <code>stdoutreporter</code> module.</p> <pre><code>ov module info stdoutreporter\n</code></pre> <p>In the output, the directory where the module is installed can be found in <code>location</code> field. In the directory of <code>stdoutreporter</code>, the following three files will exist.</p> <pre><code>stdoutreporter.md\nstdoutreporter.py\nstdoutreporter.yml\n</code></pre> <p>Among these files, <code>.py</code> and <code>.yml</code> files are the two essential files of any OakVar module. <code>.py</code> file is a Python module file which handles the operation of the module. <code>.yml</code> file is a YAML format file which has the information and the configuration of the module. <code>.md</code> file is a markdown format file which will be displayed on the OakVar web store.</p>"},{"location":"devguide_modules/#reporter","title":"Reporter","text":"<p>Let's take a look at each of these files. Below is the essential parts of <code>stdoutreporter.yml</code>.</p> <pre><code>title: Standard Output Reporter\nversion: 1.2.0\ntype: reporter\n</code></pre> <p>OakVar uses this information to manage modules. </p> <p>Below is <code>stdoutreporter.py</code>.</p> <pre><code>from oakvar import BaseReport\n\nclass Reporter(BaseReport):\n\n    def setup (self):\n        if self.args:\n            self.levels_to_write = self.args.get(\"level\")\n        if not self.levels_to_write:\n            self.levels_to_write = ['variant']\n\n    def write_preface (self, level):\n        self.level = level\n\n    def write_header (self, level):\n        line = '#'+'\\t'.join([col['col_name'] for \\\n            col in self.extracted_cols[level]])\n        print(line)\n\n    def write_table_row (self, row):\n        print('\\t'.join([str(v) if v != None else '' \\\n            for v in list(row)]))\n</code></pre> <p><code>stdoutreporter.py</code> does not have all the codes to filter and fetch annotated variants from an OakVar annotation database file. OakVar connects to <code>stdoutreporter.py</code> and calls functions <code>setup</code>, <code>write_preface</code>, <code>write_header</code>, and <code>write_table_row</code>. By defining these functions, different reporter modules can be made. More on these functions are explained in Workflow section.</p>"},{"location":"devguide_modules/#annotator","title":"Annotator","text":"<p>Check out a guide on interactive annotation module development here.</p> <p>Watch a webinar on making OakVar annotation modules here.</p> <p>The essential function for annotator modules is <code>annotator</code>. Below is <code>target.py</code> of <code>target</code> annotation module.</p> <pre><code>from oakvar import BaseAnnotator\nimport sqlite3\n\nclass Annotator(BaseAnnotator):\n\n    def annotate(self, input_data):\n        self.cursor.execute('select rationale, agents_therapy ' +\n            'from target where gene=\"%s\";'%input_data['hugo'])\n        row = self.cursor.fetchone()\n        if row:\n            out = {'rationale': row[0], 'therapy': row[1]}\n        else:\n            out = None\n        return out\n</code></pre> <p><code>annotate</code> function receives <code>input_data</code> which is a <code>dict</code> of a variant, such as</p> <pre><code>{\"uid\": 1834, \n \"chrom\": \"chr1\", \n \"pos\": 19834895, \n \"ref_base\": \"A\", \n \"alt_base\": \"G\"}\n</code></pre> <p>OakVar will feed into <code>annotate</code> of an annotator module with variants of the input file, one by one, and excepts a <code>dict</code> of the module's output for each given variant. In the above example, the output is a <code>dict</code> with two keys, <code>rationale</code> and <code>therapy</code>. OakVar will collect the <code>dict</code>s of input variants and feed them to the downstream steps. </p> <p>The two keys <code>rationale</code> and <code>therapy</code> in the above example are the output columns of the module. The output columns of a module should be defined in the module's config (<code>.yml</code>) file. <code>target</code> module's config file, <code>target.yml</code>, has the following output columns definition.</p> <pre><code>output_columns:\n- name: therapy\n  title: Recommended Therapy\n  type: string\n- name: rationale\n  title: Rationale\n  type: string\n</code></pre> <p><code>name</code>, <code>title</code>, and <code>type</code> are essential components of an output column, with <code>name</code> being the same as a key in the output <code>dict</code> by <code>annotate</code> function. OakVar will expect the keys defined as <code>name</code> in <code>output_columns</code> in a module's config file in the return value of <code>annotate</code> function of the module.</p> <p>Once a module's output columns are defined in its config file and the module's <code>annotate</code> function returns a <code>dict</code> with those output columns' <code>name</code> as its keys, OakVar will do the rest to include the module's output in the annotation database and reports.</p> <p>OakVar provides convenience variables to eahc module's <code>annotate</code> function. If a module has <code>data</code> subdirectory and if the subdirectory has an SQLite database file whose name is <code>&lt;module name&gt;.sqlite</code> (thus, in the above example, <code>target/data/target.sqlite</code>), <code>self.conn</code> and <code>self.cursor</code> are provided as an SQLite database connection and cursor objects.</p>"},{"location":"devguide_modules/#mapper","title":"Mapper","text":"<p>The essential function for mapper modules is <code>map</code>. A typical mapper modules will be structured as follows.</p> <pre><code>...\nclass Mapper(BaseMapper):\n    ...\n    def map(self, input_data):\n        ...\n</code></pre> <p>A mapper module's <code>map</code> function is similar to an annotator module's <code>annotate</code> function, in that it receives a <code>dict</code> of an input variant, which has keys such as <code>uid</code>, <code>chrom</code>, <code>pos</code>, <code>ref_base</code>, and <code>alt_base) and is expected to return an</code>dict<code>of its output. One difference is that its output</code>dict<code>is supposed to have a pre-defined set of keys. First of all, the output</code>dict<code>of</code>map<code>function should have the keys in</code>input_data`. Then, the following keys should be defined as well.</p> <pre><code>coding\nhugo\ntranscript\nso\ncchange\nachange\nall_mappings\n</code></pre> <p>More details will be explained here. Until then, you can take a look at <code>gencode</code> module's <code>gencode.py</code> to know more.</p>"},{"location":"devguide_modules/#converter","title":"Converter","text":"<p>The essential function for converter modules is <code>convert_line</code>. A typical converter module will be structured as follows.</p> <pre><code>...\nclass Converter(BaseConverter):\n    ...\n    def convert_line(self, l):\n        ...\n</code></pre> <p>More will be explained later.</p>"},{"location":"devguide_modules/#postaggregator","title":"Postaggregator","text":"<p>The essential function for postaggregator modules is <code>annotate</code>. A typical postaggregator module will be structured as follows.</p> <pre><code>...\nclass Postaggregator(BasePostaggregator):\n    ...\n    def annotate(self, input_data):\n        ...\n</code></pre> <p>More will be explained later.</p>"},{"location":"devguide_modules/#dependency-control","title":"Dependency control","text":""},{"location":"devguide_modules/#module-dependency","title":"Module dependency","text":"<p>An OakVar module can depend on other OakVar modules for it to properly function. Let's say module <code>annotator1</code> uses the output of <code>annotator2</code> and <code>annotator3</code> as its input. For <code>annotator1</code> to properly function, <code>annotator2</code> and <code>annotator3</code> should be already installed. This installation requirement is specified in the config file of <code>annotator1</code> (<code>annotator1.yml</code>) as the following:</p> <pre><code>requires:\n- annotator2\n- annotator3\n</code></pre> <p>With this in place, when <code>annotator1</code> is installed with <code>ov module install annotator1</code>, the two dependency modules also will be installed automatically, if not already present in the system.</p> <p>As mentioned, <code>annotator1</code> uses the output of <code>annotator2</code> and <code>annotator3</code> as its input. This dependency should be defined in <code>annotator1.yml</code> as the following.</p> <pre><code>secondary_inputs:\n  annotator2: {}\n  annotator3: {}\n</code></pre> <p>With this simple definition, the output of <code>annotate2</code> and <code>annotate3</code> will be available as <code>secondary_data</code> variable to the <code>annotate</code> function of <code>annotate1</code> module. For example, </p> <pre><code>def annotate(self, input_data, secondary_data=None):\n...\n</code></pre> <p>of <code>annotate1.py</code> will have <code>secondary_data[\"annotate2\"]</code> and <code>secondary_data[\"annotate3\"]</code> available. If <code>annotate2.yml</code> has the following output column definition,</p> <pre><code>output_columns:\n- name: value1\n  title: Value 1\n  type: string\n- name: value2\n  title: Value 2\n  type: string\n</code></pre> <p><code>annotate1</code>'s <code>annotate</code> function will be able to access those with <code>secondary_data[\"annotator2\"][\"value1\"]</code> and <code>secondary_data[\"annotator2\"][\"value2\"]\"</code>.</p> <p>Finer control of secondary input is possible as follows. For example, the following in <code>annotate1.yml</code></p> <pre><code>secondary_inputs:\n  annotator2:\n    match_columns:\n      primary: uid\n      secondary: uid\n    use_columns:\n      - value1\n</code></pre> <p>will mean that <code>annotator2</code> output will be available as <code>secondary_data[\"annotator2\"]</code> to the <code>annotate</code> function of <code>annotator1</code>, that for each variant, the <code>uid</code> field in the output by <code>annotator2</code> and the <code>uid</code> field in <code>input_data</code> to the <code>annotate</code> function of <code>annotator1</code> will be match to find the correct secondary_data for the variant to the function, and that only <code>value1</code> field will be available to the function.</p>"},{"location":"devguide_modules/#pypi-dependency","title":"PyPI dependency","text":"<p>If an OakVar module needs packages from PyPI, such requirement can be specified in the module's yml file. For example, if <code>annotator1</code>'s <code>annotator1.yml</code> has the following,</p> <pre><code>pypi_dependencies:\n- numpy\n</code></pre> <p><code>ov module install annotator1</code> will automatically perform <code>pip install numpy</code> while installing <code>annotate1</code> module.</p>"},{"location":"devguide_workflows/","title":"Workflows","text":"<p>There are a few workflows of using OakVar modules.</p> <pre><code>ov run\nov report\nov gui\n</code></pre> <p>As mentioned, there are three workflows of using modules in OakVar.</p> <pre><code>ov run\nov report\nov gui\n</code></pre>"},{"location":"devguide_workflows/#ov-run","title":"ov run","text":"<p>When <code>ov run</code> is called, OakVar imports and executes modules in the following manner.</p> <pre><code>input\n| recognizes input files' format with\n| converter modules' check_format function\nv\nconverter module's convert_line function\nv\nmapper module's map function\n| imports annotator modules according to\n| -a option\nv\nannotator modules' annotate function\n| import postaggregator modules according to\n| -p option as well as default postaggregator\n| modules\nv\npostaggregator modules' annotate function\n| import reporter modules according to\n| -t option\nv\nreporter modules' write_preface, write_header, write_table_row functions\n|\nv\nreport files\n</code></pre>"},{"location":"devguide_workflows/#ov-report","title":"ov report","text":"<p>When <code>ov report</code> is called, OakVar imports and executes modules in the following manner.</p> <pre><code>annotation database file\n| import reporter modules accorging to\n| -t option\nv\nreporter modules' write_preface, write_header, write_table_row functions\n|\nv\nreport files\n</code></pre>"},{"location":"devguide_workflows/#ov-gui","title":"ov gui","text":"<p>Will be discussed later.</p>"},{"location":"gui/","title":"Graphical user interface","text":"<p>OakVar's graphical user interface (GUI) is launched by</p> <pre><code>ov gui\n</code></pre> <p>A web server will be started on the terminal and your default  web browser will open a new tab, which will show the graphical  user interface of OakVar.</p> <p>The log output of the web server will be at <code>wcravat.log</code> file under <code>conf_dir</code> shown by <code>ov system config</code>. Also,</p> <pre><code>ov gui --debug\n</code></pre> <p>will display any error the server encounters on the terminal as well.</p> <p>OakVar GUI has two tabs, <code>Jobs</code> and <code>Store</code>.</p>"},{"location":"gui/#jobs","title":"Jobs","text":"<p>In <code>Jobs</code> tab of OakVar GUI, you can submit jobs and launch  interactive result viewer for individual jobs.</p>"},{"location":"gui/#store","title":"Store","text":"<p>In <code>Store</code> tab of OakVar GUI, you can install and uninstall OakVar modules as well as explore the details of each module. OakVar's web store brings OakVar's own modules as well as OpenCRAVAT's modules.</p>"},{"location":"gui/#result-viewer","title":"Result Viewer","text":"<p><code>ov gui</code> with a path to an OakVar result SQLite database file will launch the OakVar result viewer. For example,</p> <pre><code>ov gui sample_1.vcf.sqlite\n</code></pre> <p>will launch the OakVar result viewer on the analysis data in  <code>sample_1.vcf.sqlite</code>.</p> <p>Just-DNA-Seq group wrote a very nice tutorial on using OakVar GUI. Please refer to their doc for more details of using OakVar GUI.</p>"},{"location":"install_modules/","title":"Modules","text":""},{"location":"install_modules/#installing-through-oakvar-store","title":"Installing through OakVar Store","text":"<p>The OakVar Store is where OakVar's modules are registered, found, and distributed. If you used OpenCRAVAT, OpenCRAVAT's modules are also available through OakVar Store if there is no updated OakVar version of the same module exists. To know which modules are available through the OakVar Store, do</p> <pre><code>ov module ls -a\n</code></pre> <p>This will list the OakVar modules available through the OakVar Store. To know more details of a specific module, do</p> <pre><code>ov module info module_name # module_name such as clinvar\n</code></pre> <p>To install modules, do</p> <pre><code>ov module install module_name [module_name] ...\n</code></pre> <p>A regular expression can be given as module_name. Thus, </p> <pre><code>ov module install clin.*\n</code></pre> <p>will install all modules the name of which starts with <code>clin</code>.</p>"},{"location":"install_modules/#installing-through-github","title":"Installing through GitHub","text":"<p><code>ov module install</code> can accept a GitHub URL as module_name. Thus, OakVar can now install custom modules directly from GitHub. It is as easy as simply giving the URL of the folder of the module on GitHub to <code>ov module install</code>. Let's say you have a custom module hosted on the <code>dev</code> branch of your GitHub repo <code>yourorganization/yourrepo</code> in the following folder:</p> <pre><code>https://github.com/yourorganization/yourrepo/\n    oakvar_modules/\n        annotators/\n            awesomeannotator/\n                awssomeannotator.py\n                awssomeannotator.yml\n                awssomeannotator.md\n                data/\n                    awesomeannotator.sqlite\n</code></pre> <p>Your colleagues can install <code>awesomeannotator</code> module with the following command.</p> <pre><code>ov module install \\\n https://github.com/yourorganization/yourrepo/\\\n tree/dev/oakvar_modules/annotators/awssomeannotator\n</code></pre> <p>will download the content of only the <code>annotator</code> folder in the <code>dev</code> branch of the repository, figure out that the module is an <code>annotator</code>, and put the <code>awesomeannotator</code> module under the appropriate <code>annotators</code> category folder inside your system's OakVar modules root directory.</p> <p>This way, your custom module under development can be easily shared with your colleagues.</p>"},{"location":"install_system/","title":"System","text":""},{"location":"install_system/#installation","title":"Installation","text":"<p>Install OakVar.</p> <pre><code>pip install oakvar\n</code></pre>"},{"location":"install_system/#note-for-open-cravat-users","title":"Note for open-cravat users","text":"<p>OakVar supports backward compatibility with open-cravat and thus open-cravat should be first removed before installing OakVar by <code>pip uninstall open-cravat</code>. open-cravat can simply be restored by removing OakVar by <code>pip uninstall oakvar</code> and installing open-cravat by <code>pip install open-cravat</code>. There is no side-effect of doing this switch unless you share open-cravat modules with OakVar as described below.</p> <p>OakVar does not share system files with nor transfer system configuration from open-cravat. OakVar's default modules directory is different.</p> <p>OakVar is backward-compatible with open-cravat modules. If you have been using open-cravat and want to continue to use open-cravat modules with OakVar, you can do so by setting OakVar modules directory to point to that of open-cravat with <code>ov system md</code> command. Please keep in mind that OakVar has its own updated versions for some of open-cravat modules, so if you are sharing the same modules directory between OakVar and open-cravat, <code>ov module update</code> may break oc-compatibility of some of the updated modules.</p>"},{"location":"install_system/#setup","title":"Setup","text":"<p><code>ov system setup</code> will set up OakVar with sane defaults.</p> <p>Setup process can be customized with a setup file or environment variables, which can be useful in automated deployment.</p>"},{"location":"install_system/#setup-with-a-file","title":"Setup with a file","text":"<p>A setup file in yaml format can be used. System configuration fields which are missing in the setup file will be filled with sane defaults. Setup with a file with custom locations for modules and logs can be done as</p> <pre><code>ov system setup -f setup.yaml\n</code></pre> <p>where setup.yaml is</p> <pre><code>modules_dir: ~/oakvar_modules\nlogs_dir: ~/oakvar_logs\n</code></pre>"},{"location":"install_system/#setup-with-environment-variables","title":"Setup with environment variables","text":"<p>All system configuration fields can be overridden with environment variables. To override a system config field, set the environment variable <code>OV_</code> + upper-cased field name to a desired value. For example, </p> System configuration field Environmental variable sys_conf_path OV_SYS_CONF_PATH root_dir OV_ROOT_DIR modules_dir OV_MODULES_DIR log_dir OV_LOG_DIR jobs_dir OV_JOBS_DIR conf_dir OV_CONF_DIR gui_port OV_GUI_PORT <p>The custom setup in the previous section can be done using environmental variables as</p> <pre><code>export OV_MODULES_DIR=~/oakvar_modules\nexport OV_LOGS_DIR=~/oakvar_logs\nov system setup\n</code></pre> <p>Another example is installing system files in a custom directory.</p> <pre><code>export OV_ROOT_DIR=/data/oakvar\nov system setup\n</code></pre> <p>This will install OakVar system files at <code>/data/oakvar</code>.</p> <p>Using environmental variablse for setup can be useful in deploying OakVar with Docker containers.</p>"},{"location":"install_system/#clean-setup","title":"Clean setup","text":"<p>If you experience any problem and want to do clean installation of OakVar, <code>ov system setup --clean</code> provides such clean installation. It will reset the system and user configuration files. <code>--clean</code> still will not delete <code>modules</code>, <code>jobs</code>, <code>logs</code>, and <code>conf</code> folders. <code>modules</code> have downloaded modules and users should manually delete this folder if they really want, because this folder can take a lot of time to recreate. <code>jobs</code>, <code>logs</code>, and <code>conf</code> folders have just contents.</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#modular","title":"Modular","text":"<p>OakVar is a platform for genomic variant analyses. By platform, we mean that OakVar is modular. Modules written in Python are the building blocks of OakVar. OakVar achieves its functions by orchestrating such modules.</p> <p>OakVar has the following core functionality:</p> <ul> <li>Annotation</li> <li>Query</li> <li>Serve applications</li> <li>Visualize</li> </ul>"},{"location":"overview/#annotation","title":"Annotation","text":"<p>Annotation is adding additional information to a variant. A certain variant may have a clinical consequence such as a genetic disease or a meaning such as being rarely observed in a population. There are many sources of such annotation, and manually finding the annotation from these many sources for many variants can be laborious and daunting.</p> <p>OakVar automates this annotation work by:</p> <ul> <li>Loop over variants</li> <li>Standardize annotation sources</li> <li>Manage installation of annotation sources</li> <li>Organize the annotation from different sources by variant</li> </ul> <p>The main OakVar command for annotation is <code>ov run</code>. For example, the following command will annotate the variants in a VCF file, <code>input.vcf</code>, with annotation sources ClinVar and COSMIC and generate an annotated VCF file, <code>annotated.vcf</code> as well as a database file, <code>annotated.sqlite</code>.</p> <pre><code>ov module install clinvar # if clinvar module is not already installed.\nov run input.vcf -a clinvar cosmic -t vcf -n annotated\n</code></pre>"},{"location":"overview/#query","title":"Query","text":"<p>Once variants are annotated, they can be filtered by their annotation, for example to know if a sample has clinically relevant variants or not. OakVar stores annotated variants as a database, and thus variants annotated with OakVar can be filtered with SQL queries. OakVar provides a standard mechanism to query variants regardless of their annotation sources.</p> <p>The main OakVar command for querying variants is <code>ov report</code>. For example, the following command will filter the variants in <code>annotated.sqlite</code> with the filter set defined in <code>filter.json</code> and produce a VCF file of filtered variants, <code>filtered.vcf</code>.</p> <pre><code>ov report annotated.sqlite -f filter.json -s filtered -t vcf\n</code></pre> <p>Query options can be given to <code>ov run</code> as well. The following command will generate the same <code>annotated.sqlite</code> with annotated variants, but <code>annotated.vcf</code> will already have annotated and filtered variants.</p> <pre><code>ov run input.vcf -a clinvar cosmic -t vcf -n annotated -f filter.json\n</code></pre>"},{"location":"overview/#visualize","title":"Visualize","text":"<p>OakVar comes with a graphical user interface. <code>ov gui</code> launches a job and store management web app by default, and also works as the entry point for OakVar's web apps. </p>"},{"location":"overview/#applications","title":"Applications","text":"<p>Most common way of using OakVar is the input-to-output workflow using <code>ov run</code> and <code>ov report</code>. However, any Python-based program can access the variants annotated with OakVar since OakVar is a Python library as well. This aspect of OakVar is being actively developed and streamlined. OakVar comes with two built-in web applications - one for job submission and module management and the other for exploring annotation result, as well as one installable web application for exploring the details of a single variant.</p> <p>Check back this page later for exciting future development in this area.</p>"},{"location":"register/","title":"Publishing your module","text":"<p>You can publish your OakVar modules to the OakVar store with OakVar command-line interface. For example, let's say you made an awesome OakVar annotation module named <code>awesome</code> and wants to share it with the world. You can do this in three steps.\u00a0</p> <pre><code>ov module pack awesome\n</code></pre> <p>This will create one or two files, depending whether your module has data folder in it or not. Your module's code will be packed into <code>awesome__&lt;version&gt;__code.zip</code> where <code>version</code> is the version number defined in <code>awesome.yml</code> file in your module's directory, and if your module has <code>data</code> subdirectory, <code>awesome__&lt;version&gt;__data.zip</code> also will be created.</p> <p>If your module is bigger than 1GB, <code>--split</code> option can be given. This will split the code and the data of your module into zip part files of 1GB each. For example, if <code>awesome</code> module is 2.5GB big and most of the size is from its data, </p> <pre><code>ov module pack awesome --split\n</code></pre> <p>will produce the following files.</p> <pre><code>awesome__1.0.0__code.zip000\nawesome__1.0.0__data.zip000\nawesome__1.0.0__data.zip001\nawesome__1.0.0__data.zip002\n</code></pre> <p>Then, upload these zip files to somewhere people can download. Using their URLs,</p> <pre><code>ov store register awesome --code-url\u00a0... --data-url\u00a0...\n</code></pre> <p>will register your module in the OakVar store. <code>--data-url</code> is needed only if your module produced a data zip file. If you have many split zip files, <code>-f</code> option can be given with a YAML format file with code and data URLs. For example, </p> <pre><code>ov store register awesome -f urls.txt\n</code></pre> <p>with <code>urls.txt</code> of the following content</p> <pre><code>code_url:\n- https://dropbox.com/xxxxxxxx/awesome__1.0.0__code.zip000\ndata_url:\n- https://dropbox.com/xxxxxxxx/awesome__1.0.0__data.zip000\n- https://dropbox.com/xxxxxxxx/awesome__1.0.0__data.zip001\n- https://dropbox.com/xxxxxxxx/awesome__1.0.0__data.zip002\n</code></pre> <p>will register the module.</p> <p>This way, you have total control of your module's publication. You can just delete the module zip files from where you stored them and OakVar store will automatically deregister those deleted versions. If you move the module zip files to new locations you can just register them again with new URLs.</p>"},{"location":"third_party/","title":"Third party","text":"<p>OakVar uses third party software. Their names and license are listed below.</p> Name License Note liftover MIT aiosqlite MIT oyaml MIT gdown MIT duckdb MIT rich MIT pyjwt MIT polars MIT connectorx MIT aiohttp-cors Apache 2.0 requests Apache 2.0 requests-toolbelt Apache 2.0 aiohttp Apache 2.0 pyarrow Apache 2.0 intervaltree Apache 2.0 markdown BSD nest-asyncio BSD psutil BSD python-dateutil BSD download BSD packaging BSD mpmath BSD multiprocess BSD-3-Clause chardet GNU Lesser General Public License Unlike GPL, proprietry software developed with this library does not need to disclose its source code. twobitreader Artistic License 2.0 The Artistic License 2.0 is an open-source license with no copyleft similar to the MIT license. Proprietary software developed with this library as a library does not need to disclose its source code. Pillow Historical Permission Notice and Disclaimer This license is functionally identical to BSD and MIT except the option of promoting with the author's name. Proprietary software developed with this library does not need to disclose its source code."},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#installation-and-setup","title":"Installation and setup","text":"<p>Install OakVar and setup following this instruction.</p>"},{"location":"tutorial/#check-system-configuration","title":"Check system configuration","text":"<p>How OakVar has been set up can be viewed with <code>ov config system</code> command.</p> <pre><code>ov config system\n\npublish_url: https://store.oakvar.com\nstore_url: https://store.oakvar.com\n...\ndefault_assembly: hg38\nsys_conf_path: /Users/Shared/oakvar/conf/system.yml\nroot_dir: /Users/Shared/oakvar\nmodules_dir: /Users/Shared/oakvar/modules\nconf_dir: /Users/Shared/oakvar/conf\njobs_dir: /Users/Shared/oakvar/jobs\nlog_dir: /Users/Shared/oakvar/logs\n</code></pre> <p><code>modules_dir</code> is where OakVar modules for conversion, mapping, annotation, and reporting as well as OakVar applications are stored.</p>"},{"location":"tutorial/#install-clinvar-annotation-module","title":"Install ClinVar annotation module","text":"<p>In this tutorial, we will annotate variants with ClinVar. To do so, we install the ClinVar module.</p> <pre><code>ov module install clinvar\n</code></pre>"},{"location":"tutorial/#uninstall-a-module","title":"Uninstall a module","text":"<p>Just to practice uninstalling a module, we'll install and then uninstall BioGRID.</p> <pre><code>ov module install biogrid\nov module uninstall biogrid\n</code></pre>"},{"location":"tutorial/#create-an-example-input","title":"Create an example input","text":"<p>Next, we need some variants to annotate. OakVar has a built-in variant file for this purpose.</p> <pre><code>ov new exampleinput\n</code></pre> <p>This will create an example input file, <code>exampleinput</code>, in the current directory.</p>"},{"location":"tutorial/#run-an-annotation-job","title":"Run an annotation job","text":"<p>Now, we annotate the example input file with ClinVar and then create a result VCF file with annotated variants. <code>-a</code> option controls annotation sources and <code>-t</code> option report formats.</p> <pre><code>ov run exampleinput -a clinvar -t vcf\n</code></pre> <p>This will create <code>exampleinuput.vcf</code> which will have the input variants annotated with ClinVar. Additionally, <code>exampleinput.sqlite</code> will be created. This file is a SQLite database file with annotated variants.</p>"},{"location":"tutorial/#examine-the-annotated-variants","title":"Examine the annotated variants","text":"<p>Let's examine the annotated variants in the previous step. <code>ov report</code> is used to show or generate the output of annotated variants.</p> <pre><code>ov report exampleinput.sqlite -t stdout\n</code></pre> <p>This will print out the annotated variants to the screen. <code>-t stdout</code> tells <code>ov report</code> to use <code>stdoutreporter</code> module, which is a reporter module and will receive annotated variants, variant by variant, from <code>ov report</code> and convert it to the standard output of the terminal.</p>"},{"location":"tutorial/#generate-an-excel-report-of-annotated-variants","title":"Generate an Excel report of annotated variants","text":"<p>There are more reporter modules. <code>excelreporter</code>, an Excel format reporting module is included in OakVar by default. <code>-s</code> option defines the file name of the report file except the extension.</p> <pre><code>ov report exampleinput.sqlite -t excel -s annotated\n</code></pre> <p>This will generate <code>annotated.xlsx</code> file with annotated variants.</p>"},{"location":"tutorial/#visualize-annotated-variants","title":"Visualize annotated variants","text":"<p>OakVar comes with a couple of embedded web applications, for graphical user interface-based operation of OakVar. Let's explore the annotated variants on a web browser.</p> <pre><code>ov gui exampleinput.sqlite\n</code></pre> <p>This will launch an interactive result viewer for the analysis job done in the previous section.</p> <p></p> <p>Click the sidebar and look around the tables with annotated variants and the widgets in each option. Filter option on the sidebar has a customizable filter section.</p> <p></p> <p>Click the brown <code>+</code> button at the left corner to add and set up filter criteria, and click <code>Apply</code> button to load filtered variants.</p> <p><code>ov gui</code> will launch a graphical user interface for managing analysis jobs and modules. </p> <p></p> <p>Click <code>Manually enter variant instead</code> button followed by <code>Try an example</code> to use an example input and click <code>Annotate</code> button to run an annotation job. Optional reporters such as <code>VCF Reporter</code>,<code>Text Reporter</code> and <code>Excel Reporter</code> can be run by selecting the respective option on the right side. Additionally, modules can be selected below. The new job will show on the results option. </p> <p></p> <p>As seen below, <code>ClinVar</code> and <code>Gene Ontonogy</code> modules are available to run on the example job. </p> <p></p> <p>Installing and uninstalling modules can be managed on <code>Store</code> tab.</p> <p></p>"},{"location":"vcf2vcf/","title":"VCF2VCF","text":"<p>With OakVar v2.5.0 and later, a fast-track annotation workflow, <code>vcf2vcf</code>, is available. The speed-up by this workflow can be an order of magnitude compared to previous versions, depending on the number of samples. For example, mapping the variants in the chromosome 20 of the 1000 Genomes Project data took about 10 minutes with --vcf2vcf in our test system. With ClinVar annotation added, about 15 minutes. The condition to use this workflow is:</p> <ul> <li>Input file format is Variant Call Format (VCF).</li> <li>Output file format is also VCF.</li> <li>Annotation SQLite database files are not needed.</li> </ul> <p>To use <code>vcf2vcf</code>, just add <code>--vcf2vcf</code> to <code>ov run</code>. The output format will be always VCF, so <code>-t</code> option is not necessary. For example,</p> <pre><code>ov run input.vcf --vcf2vcf -a clinvar\n</code></pre> <p>will read <code>input.vcf</code> and generate <code>input.vcf.vcf</code> with ClinVar annotation as well as GENCODE gene mapping.</p> <pre><code>ov run input.vcf --vcf2vcf -a clinvar -n annotated\n</code></pre> <p>will generate <code>annotated.vcf</code> as output, due to <code>-n</code> option.</p>"},{"location":"api/config/","title":"config","text":""},{"location":"api/config/#oakvar.api.config.system","title":"system","text":"<pre><code>system(key=None, value=None, type='str')\n</code></pre> <p>Gets or sets system configuration.</p> PARAMETER  DESCRIPTION <code>key</code> <p>key</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>value</code> <p>value</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>type</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'str'</code> </p> RETURNS DESCRIPTION <code>Optional[Union[str, int, float, dict]]</code> <p>With no argument, system configuration is returned as a dict. With only key given, the system configuration value for the key is returned. With key, value, and type given, system configuration is updated with the value of the type for the key. If type is omitted, str is assumed.</p>"},{"location":"api/config/#oakvar.api.config.user","title":"user","text":"<pre><code>user()\n</code></pre> <p>Gets user configuration.</p> RETURNS DESCRIPTION <code>Optional[dict]</code> <p>OakVar user configuration</p>"},{"location":"api/lib_util_util/","title":"oakvar.lib.util.util","text":""},{"location":"api/lib_util_util/#oakvar.lib.util.util.get_df_from_db","title":"get_df_from_db","text":"<pre><code>get_df_from_db(db_path, table_name='variant', sql=None, num_cores=1, conn=None)\n</code></pre> <p>Gets a Polars DataFrame of a table in an OakVar result database.</p> PARAMETER  DESCRIPTION <code>db_path</code> <p>Path to the OakVar result database file            from which a Polars DataFrame will be extracted.</p> <p> TYPE: <code>str</code> </p> <code>table_name</code> <p>Table name to dump to the DataFrame</p> <p> TYPE: <code>str</code> DEFAULT: <code>'variant'</code> </p> <code>sql</code> <p>Custom SQL to apply before dumping to the DataFrame. For example, <code>\"select base__uid, base__chrom, base__pos from variant where clinvar__sig='Pathogenic'\"</code>.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>num_cores</code> <p>Number of CPU cores to use</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>Optional[DataFrame]</code> <p>DataFrame of the given or default table of the OakVar result database</p>"},{"location":"api/main/","title":"Python API","text":"<p>OakVar functionality is available through Python API. For example, OakVar's annotation pipeline can be started with the following:</p> <pre><code>&gt;&gt;&gt; import oakvar as ov\n&gt;&gt;&gt; ov.api.run(inputs=[\"input.vcf\"], annotators=[\"clinvar\"], report_types=[\"vcf\"])\n</code></pre> <p>There is 1 to 1 correspondence between command-line interface commands and Python API functions. The table below shows such correspondence.</p> CLI Python API Functionality ov config system oakvar.api.config.system Gets or sets system configuration. ov config user oakvar.api.config.user Gets user configuration. ov issue oakvar.api.report_issues Opens a webpage to report OakVar issues. ov license oakvar.api.license Gets the OakVar license information. ov module info oakvar.api.module.info Gets information on a module. ov module install oakvar.api.module.install Installs modules. ov module installbase oakvar.api.module.installbase Installs system modules. ov module ls oakvar.api.module.ls Lists modules. ov module pack oakvar.api.module.pack Packs a module for registration at OakVar store. ov module uninstall oakvar.api.module.uninstall Uninstalls modules. ov module update oakvar.api.module.update Updates modules. ov new exampleinput oakvar.api.new.exampleinput Creates an example input file. ov new module oakvar.api.new.module Creates a template for a new module. ov report oakvar.api.report Generates report files from OakVar result databases. ov run oakvar.api.run Runs the OakVar annotation pipeline. ov store delete oakvar.api.store.delete Deletes a module from the OakVar store. ov store fetch oakvar.api.store.fetch Fetches the OakVar store cache. ov store login oakvar.api.store.login Logs in to the OakVar store. ov store logout oakvar.api.store.logout Logs out from the OakVar store. ov store register oakvar.api.store.register Register a module at the OakVar store. ov store url oakvar.api.store.url Gets the URL of the OakVar store. ov store account change oakvar.api.store.account.change Changes the password of an OakVar store account. ov store account check oakvar.api.store.account.check Checks if logged in at the OakVar store. ov store account create oakvar.api.store.account.create Creats an OakVar store account. ov store account delete oakvar.api.store.account.delete Deletes an OakVar store account. ov store account reset oakvar.api.store.account.reset Invokes a password change email for an OakVar store account. ov system account check oakvar.api.system.check Checks OakVar installation on the system. ov system md oakvar.api.system.md Gets or sets the OakVar modules directory. ov system setup oakvar.api.system.setup Sets up OakVar in the system. ov update oakvar.api.update Gets OakVar version. ov version oakvar.api.version Gets OakVar version. <p>OakVar Python API has a utility function to help data science with genomic data. If an OakVar analysis produced <code>ov_result.sqlite</code> result database file, the following will produce a Polars DataFrame from <code>variant</code> level data of the result database.</p> <pre><code>&gt;&gt;&gt; import oakvar as ov\n&gt;&gt;&gt; df = ov.get_df_from_db(\"ov_result.sqlite\", table=\"variant\")\n</code></pre>"},{"location":"api/module/","title":"module","text":""},{"location":"api/module/#oakvar.api.module.info","title":"info","text":"<pre><code>info(module_name, local=False, outer=None, **kwargs)\n</code></pre> <p>info.</p> PARAMETER  DESCRIPTION <code>module_name</code> <p>Module name</p> <p> TYPE: <code>str</code> </p> <code>local</code> <p><code>True</code> will search the module in local installation. <code>False</code> will fetch the module's information from the OakVar store.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>outer</code> <p>If set, tabulated output will be sent to it. For example, <code>sys.stdout</code>.</p> <p> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Optional[Dict[str, Any]]</code> <p><code>None</code> if the module is not found. The module's information as a dict if found.</p> <p>Examples:</p> <p>Print <code>clinvar</code> module's information to the terminal and get the same information as a dict.</p> <pre><code>&gt;&gt;&gt; clinvar_info = oakvar.api.module.info(\"clinvar\", outer=sys.stdout)\n</code></pre>"},{"location":"api/module/#oakvar.api.module.install","title":"install","text":"<pre><code>install(module_names=[], urls=None, modules_dir=None, overwrite=False, clean=False, force_data=False, yes=False, skip_dependencies=False, skip_data=False, no_fetch=False, outer=None, stage_handler=None, system_worker_state=None)\n</code></pre> <p>Install modules.</p> PARAMETER  DESCRIPTION <code>module_names</code> <p>Module names</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>urls</code> <p>URLs of module zip files. If given, <code>module_names</code> also should be given to specify the module name of each URL.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>yes</code> <p><code>True</code> will skip a confirmation prompt.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>no_fetch</code> <p><code>True</code> will skip fetching the latest the OakVar store cache.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>overwrite</code> <p><code>True</code> will overwrite the module even if the same version.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>force_data</code> <p><code>True</code> will re-install module data.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>skip_data</code> <p><code>True</code> will skip installing module data.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>modules_dir</code> <p>custom OakVar modules directory</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> <code>skip_dependencies</code> <p><code>True</code> will bypass installing dependencies.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clean</code> <p>clean</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stage_handler</code> <p> DEFAULT: <code>None</code> </p> <code>system_worker_state</code> <p> DEFAULT: <code>None</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[bool]</code> <p><code>None</code> if no problem. <code>False</code> if there was a problem.</p>"},{"location":"api/module/#oakvar.api.module.installbase","title":"installbase","text":"<pre><code>installbase(no_fetch=False, conf=None, overwrite=False, modules_dir=None, system_worker_state=None, outer=None)\n</code></pre> <p>Installs OakVar system/default modules.</p> PARAMETER  DESCRIPTION <code>no_fetch</code> <p><code>True</code> will skip fetching the latest the OakVar store cache.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>overwrite</code> <p><code>True</code> will overwrite the module even if the same version.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>modules_dir</code> <p>custom OakVar modules directory</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> <code>conf</code> <p>Custom system configuration as a dict</p> <p> TYPE: <code>Optional[dict]</code> DEFAULT: <code>None</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> <code>system_worker_state</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[bool]</code> <p><code>None</code> if successful. <code>False</code> if not.</p>"},{"location":"api/module/#oakvar.api.module.ls","title":"ls","text":"<pre><code>ls(module_names=['.*'], module_types=[], search_store=False, tags=[], nameonly=False, humanized_size=False, outer=None, **kwargs)\n</code></pre> <p>List installed and available OakVar modules.</p> PARAMETER  DESCRIPTION <code>module_names</code> <p>Module names</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>['.*']</code> </p> <code>module_types</code> <p>Module types</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>search_store</code> <p><code>True</code> will search not yet installed modules on the OakVar store. <code>False</code> for only locally installed modules.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>humanized_size</code> <p><code>True</code> will show humanized module size.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tags</code> <p>Module tags to search. Regular expression can be used.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>nameonly</code> <p><code>True</code> will return module names only.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Dict[str, Any]]</code> <p>List of Dict, each element of which has an installed module's information.</p> <p>Examples:</p> <p>Get the information on the installed ClinVar module.</p> <pre><code>&gt;&gt;&gt; oakvar.api.module.ls(module_names=[\"clinvar\"])\n</code></pre> <p>Search for all reporter modules in the OakVar store.</p> <pre><code>&gt;&gt;&gt; oakvar.api.module.ls(module_types=[\"reporter\"], search_store=True)\n</code></pre> <p>Search the OakVar store for modules with \"allele\" in their tags.</p> <pre><code>&gt;&gt;&gt; oakvar.api.module.ls(tags=[\".*allele.*\"], search_store=True)\n</code></pre>"},{"location":"api/module/#oakvar.api.module.pack","title":"pack","text":"<pre><code>pack(module_name, outdir=None, code_only=False, split=False, outer=None)\n</code></pre> <p>Packs a module's code and optionally data to register it with OakVar store. This will produce zip files. They are supposed to be uploaded to somewhere on the web, and <code>oakvar.api.store.register</code> is used to register the module in the OakVar store. After this, the module will be available to all OakVar users worldwide.</p> PARAMETER  DESCRIPTION <code>module_name</code> <p>Module name</p> <p> TYPE: <code>str</code> </p> <code>outdir</code> <p>Directory to store the module pack zip files. Default is the current working directory.</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> <code>code_only</code> <p><code>True</code> will pack only the code. Useful if only updated code will be registered.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>split</code> <p><code>True</code> will split the code and data zip files by 100MB.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[Dict[str, Optional[Path]]]</code> <p><code>None</code> if the module does not exist. A dict of { \"code\": [Path], \"data\": [Path] } if successful.}</p>"},{"location":"api/module/#oakvar.api.module.uninstall","title":"uninstall","text":"<pre><code>uninstall(module_names=None, yes=False, outer=None)\n</code></pre> <p>Uninstall modules.</p> PARAMETER  DESCRIPTION <code>module_names</code> <p>Modules names</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>yes</code> <p><code>True</code> to skip a confirmation prompt.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p>"},{"location":"api/module/#oakvar.api.module.update","title":"update","text":"<pre><code>update(module_name_patterns=[], yes=False, no_fetch=False, force_data=False, modules_dir=None, outer=None, system_worker_state=None)\n</code></pre> <p>Update installed modules.</p> PARAMETER  DESCRIPTION <code>module_name_patterns</code> <p>Module name patterns. For example, <code>[\"clin.*\"]</code> will check <code>clinvar</code>, <code>clingen</code>, etc.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>yes</code> <p><code>True</code> to skip a confirmation prompt.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>no_fetch</code> <p><code>True</code> will skip fetching the latest the OakVar store cache.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>force_data</code> <p><code>True</code> will re-install module data.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>modules_dir</code> <p>custom OakVar modules directory</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> <code>system_worker_state</code> <p> DEFAULT: <code>None</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if update was successful. <code>False</code> if not.</p>"},{"location":"api/new/","title":"new","text":""},{"location":"api/new/#oakvar.api.new.exampleinput","title":"exampleinput","text":"<pre><code>exampleinput(directory='.', outer=None)\n</code></pre> <p>exampleinput.</p> PARAMETER  DESCRIPTION <code>directory</code> <p>Directory to create the example input file in</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'.'</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[Path]</code> <p><code>None</code> if the given directory does not exist. Path to the created example input file if successful.</p>"},{"location":"api/new/#oakvar.api.new.module","title":"module","text":"<pre><code>module(module_name, module_type, outer=None)\n</code></pre> <p>module.</p> PARAMETER  DESCRIPTION <code>module_name</code> <p>Module name</p> <p> TYPE: <code>str</code> </p> <code>module_type</code> <p>Module type</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[Path]</code> <p><code>None</code> if not successful. Directory of the created module if successful.</p>"},{"location":"api/oakvar_api/","title":"oakvar.api","text":""},{"location":"api/oakvar_api/#oakvar.api.license","title":"license","text":"<pre><code>license(outer=None)\n</code></pre> <p>Shows the OakVar license information.</p>"},{"location":"api/oakvar_api/#oakvar.api.run","title":"run","text":"<pre><code>run(inputs, annotators=[], report_types=[], reports=[], annotators_replace=[], excludes=[], run_name=[], output_dir=[], startat=None, endat=None, skip=[], confpath=None, conf={}, genome=None, cleandb=False, newlog=False, note='', mp=None, keep_temp=False, writeadmindb=False, job_name=None, separatesample=False, primary_transcript=['mane'], clean=False, module_options={}, system_option={}, package=None, filtersql=None, includesample=None, excludesample=None, filter=None, filterpath=None, modules_dir=None, preparers=[], mapper_name=[], postaggregators=[], vcf2vcf=False, logtofile=False, loglevel='INFO', combine_input=False, input_format=None, converter_module=None, input_encoding=None, ignore_sample=False, uid=None, skip_variant_deduplication=False, loop=None, outer=None)\n</code></pre> <p>Performs OakVar pipeline from conversion -&gt; mapping -&gt; annotation -&gt; database generation -&gt; post annotation -&gt; report generation.</p> PARAMETER  DESCRIPTION <code>inputs</code> <p>Paths to input files. URLs can be used as well, in which the files will be downloaded.</p> <p> TYPE: <code>List[Union[Path, str]]</code> </p> <code>combine_input</code> <p>If True, all input files will be combined as one input.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>annotators</code> <p>Annotator modules to run</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>report_types</code> <p>Report types. If given, report files of given types will be generated. If <code>vcfreporter</code> is installed in your system, giving <code>vcf</code> will invoke the module.</p> <p> TYPE: <code>Union[str, List[str]]</code> DEFAULT: <code>[]</code> </p> <code>clean</code> <p>Cleans all output and intermediate files and then starts the pipeline.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>vcf2vcf</code> <p>If True, the pipeline will run in vcf2vcf mode, where input and output should be VCF format files and result database files will not be generated. This can increase the speed of the pipeline significantly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>logtofile</code> <p>If True, .log and .err log files will be generated for normal and error logs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>input_format</code> <p>Overrides automatic detection of input file format.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>postaggregators</code> <p>Postaggregator modules to run</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>preparers</code> <p>Preparer modules to run</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>mapper_name</code> <p>Mapper module to run</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>output_dir</code> <p>Output directories. The order of inputs and output_dir elements should match.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>startat</code> <p>Start at the specified step. Options are <code>converter</code>, <code>mapper</code>, <code>annotator</code>, <code>aggregator</code>, <code>postaggregator</code>, and <code>reporter</code>.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>endat</code> <p>End at the specified step. Options are <code>converter</code>, <code>mapper</code>, <code>annotator</code>, <code>aggregator</code>, <code>postaggregator</code>, and <code>reporter</code>.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>skip</code> <p>Skip the specified steps. Options are <code>converter</code>, <code>mapper</code>, <code>annotator</code>, <code>aggregator</code>, <code>postaggregator</code>, and <code>reporter</code>.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>genome</code> <p>Genome assembly of all input files. If not given, genome assembly will be figured out or default to what is defined in lib/system/consts.py:default_assembly.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>input_encoding</code> <p>input_encoding</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>converter_module</code> <p>converter module folder path</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>mp</code> <p>Number of cores to use. Default value can be changed by <code>ov config system max_num_concurrent_annotators_per_job &lt;value&gt;</code>.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>primary_transcript</code> <p>primary_transcript</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>['mane']</code> </p> <code>modules_dir</code> <p>modules_dir</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>run_name</code> <p>run_name</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>annotators_replace</code> <p>annotators_replace</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>excludes</code> <p>excludes</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>confpath</code> <p>confpath</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>conf</code> <p>conf</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p> <code>cleandb</code> <p>cleandb</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>newlog</code> <p>newlog</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>note</code> <p>note</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>keep_temp</code> <p>keep_temp</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>writeadmindb</code> <p>writeadmindb</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>job_name</code> <p>job_name</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>separatesample</code> <p>separatesample</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>module_options</code> <p>module_options</p> <p> TYPE: <code>Dict</code> DEFAULT: <code>{}</code> </p> <code>system_option</code> <p>system_option</p> <p> TYPE: <code>Dict</code> DEFAULT: <code>{}</code> </p> <code>package</code> <p>package</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>filtersql</code> <p>filtersql</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>includesample</code> <p>includesample</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>excludesample</code> <p>excludesample</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>filter</code> <p>filter</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>filterpath</code> <p>filterpath</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>loglevel</code> <p>loglevel</p> <p> TYPE: <code>str</code> DEFAULT: <code>'INFO'</code> </p> <code>uid</code> <p>uid</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>skip_variant_deduplication</code> <p>Skip de-duplication of variants.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>loop</code> <p> DEFAULT: <code>None</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[Dict[str, Any]]</code> <p>None or a dict of reporter names and their return values</p>"},{"location":"api/oakvar_api/#oakvar.api.report","title":"report","text":"<pre><code>report(dbpath, report_types=None, module_paths=None, filterpath=None, filter=None, filtersql=None, filtername=None, filterstring=None, savepath=None, confpath=None, conf={}, nogenelevelonvariantlevel=False, inputfiles=None, separatesample=False, output_dir=None, run_name='', includesample=[], excludesample=None, package=None, cols=None, level=None, user=None, no_summary=False, serveradmindb=None, module_options={}, logtofile=False, outer=None, loop=None)\n</code></pre> <p>Generates OakVar report files based on an OakVar result database file.</p> PARAMETER  DESCRIPTION <code>dbpath</code> <p>Path to an OakVar result database file</p> <p> TYPE: <code>str</code> </p> <code>report_types</code> <p>Report types. For example, if <code>vcfreporter</code> module is installed, <code>\"vcf\"</code> will invoke the reporter.</p> <p> TYPE: <code>Optional[Union[str, List[str]]]</code> DEFAULT: <code>None</code> </p> <code>module_paths</code> <p>Paths to report modules can be directly given. This option will override report_types. For example, if <code>customreporter</code> module is installed at <code>/home/user/ov_dev/customreporter</code>, this value can be given.</p> <p> TYPE: <code>Union[str, List[Path]]</code> DEFAULT: <code>None</code> </p> <code>output_dir</code> <p>Directory to store reports</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>module_options</code> <p>Reporter module-specific options. For example, to tell <code>vcfreporter</code> to combine all OakVar result fields under one field, <code>{\"vcfreporter\": {\"type\": \"combined\"}}</code> can be used.</p> <p> TYPE: <code>Dict[str, Dict]</code> DEFAULT: <code>{}</code> </p> <code>cols</code> <p>Result columns to include. By default, all result columns are included in reports. For example, <code>[\"base__uid\", \"base__chrom\", \"base__pos\", \"base__ref_base\", \"base__alt_base\", \"clinvar__sig\"]</code> will include only the variants and ClinVar significances.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>includesample</code> <p>Samples to include in filtered reports</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>[]</code> </p> <code>excludesample</code> <p>Samples to exclude from filtered reports</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>filterpath</code> <p>filterpath</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>filter</code> <p>filter as dict</p> <p> TYPE: <code>Optional[dict]</code> DEFAULT: <code>None</code> </p> <code>filtersql</code> <p>filter sql</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>filtername</code> <p>filter file</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>filterstring</code> <p>filter dict as str</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>savepath</code> <p>savepath</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> <code>confpath</code> <p>confpath</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>nogenelevelonvariantlevel</code> <p>nogenelevelonvariantlevel</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>inputfiles</code> <p>inputfiles</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>separatesample</code> <p>separatesample</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>package</code> <p>package</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>modules_dir</code> <p>modules_dir</p> <p> TYPE: <code>Optional[str]</code> </p> <code>level</code> <p>level</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>user</code> <p>user</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>no_summary</code> <p>no_summary</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>serveradmindb</code> <p> DEFAULT: <code>None</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> <code>loop</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>None or a dict of reporter names and their return values</p>"},{"location":"api/oakvar_api/#oakvar.api.report_issue","title":"report_issue","text":"<pre><code>report_issue()\n</code></pre> <p>Opens a webpage to report issues.</p>"},{"location":"api/oakvar_api/#oakvar.api.update","title":"update","text":"<pre><code>update(outer=None)\n</code></pre> <p>Updates OakVar to the latest version and sets up OakVar again.</p> PARAMETER  DESCRIPTION <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful, <code>False</code> if not.</p>"},{"location":"api/oakvar_api/#oakvar.api.version","title":"version","text":"<pre><code>version()\n</code></pre> <p>Gets OakVar version.</p>"},{"location":"api/store/","title":"store","text":""},{"location":"api/store/#oakvar.api.store.delete","title":"delete","text":"<pre><code>delete(module_name, code_version=None, all=False, keep_only_latest=False, outer=None)\n</code></pre> <p>Deletes a module from the OakVar store and fetches the OakVar store.</p> PARAMETER  DESCRIPTION <code>module_name</code> <p>Module name</p> <p> TYPE: <code>str</code> </p> <code>code_version</code> <p>Version number of the module</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>all</code> <p><code>True</code> will delete all versions of the module.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>keep_only_latest</code> <p><code>True</code> will delete all but the latest version of the module.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p>"},{"location":"api/store/#oakvar.api.store.fetch","title":"fetch","text":"<pre><code>fetch(refresh_db=False, clean_cache_files=False, clean=False, publish_time='', outer=None)\n</code></pre> <p>Fetches OakVar store cache.</p> PARAMETER  DESCRIPTION <code>refresh_db</code> <p><code>True</code> will fetch a clean copy of OakVar store database.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clean_cache_files</code> <p><code>True</code> will fetch a clean copy of OakVar store cache files.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clean</code> <p><code>True</code> will install OakVar store cache from scratch.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>publish_time</code> <p><code>YYYY-MM-DDTHH:MM:SS</code> format datetime string. Fetch will be done for new entries newer than this datetime.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p>"},{"location":"api/store/#oakvar.api.store.login","title":"login","text":"<pre><code>login(email=None, pw=None, interactive=False, relogin=False, outer=None)\n</code></pre> <p>Logs in to the OakVar store.</p> PARAMETER  DESCRIPTION <code>email</code> <p>Email of an OakVar store account</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pw</code> <p>Password of an OakVar store account</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>interactive</code> <p>If <code>True</code> and <code>email</code> or <code>pw</code> is not given, missing fields will be interactvely received with prompts.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>relogin</code> <p>If <code>True</code>, fresh login will be performed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Result of login as a dict, with the fields <code>success</code>, <code>status_code</code>, <code>msg</code>, and <code>email</code>.</p>"},{"location":"api/store/#oakvar.api.store.logout","title":"logout","text":"<pre><code>logout(outer=None)\n</code></pre> <p>Logs out from the OakVar store.</p> PARAMETER  DESCRIPTION <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p>"},{"location":"api/store/#oakvar.api.store.register","title":"register","text":"<pre><code>register(module_name, url_file=None, code_url=[], data_url=[], overwrite=False, outer=None)\n</code></pre> <p>Register a module in the OakVar store.</p> PARAMETER  DESCRIPTION <code>module_name</code> <p>Module name</p> <p> TYPE: <code>str</code> </p> <code>code_url</code> <p>URLs of code zip files</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>data_url</code> <p>URLs of data zip files</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>url_file</code> <p>Path to a yaml file which contains the URLs of code and data zip files.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>overwrite</code> <p>overwrite</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> <code>error</code> <p> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p> <p>Examples:</p> <p>Pack <code>custommodule</code> module to produce <code>custommodule__1.0.0__code.zip</code> and <code>custommodule__1.0.0__data.zip</code>.</p> <pre><code>&gt;&gt;&gt; oakvar.api.module.pack(\"custommodule\")\n</code></pre> <p>Upload the two files to <code>https://module.storage.com/annotators/custommodule__1.0.0__code.zip</code> and <code>https://module.storage.com/annotators/custommodule__1.0.0__data.zip</code>.</p> <p>Then, register the module.</p> <pre><code>&gt;&gt;&gt; oakvar.api.store.register(\"custommodule\",\\\n    code_url=\\\n        [\"https://module.storage.com/annotators/custommodule__1.0.0__code.zip\"],\\\n    data_url=\\\n        [\"https://module.storage.com/annotators/custommodule__1.0.0__data.zip\"])\n</code></pre> <p><code>url_file.yml</code> for this registration can be made:</p> <pre><code>- code:\n  - https://module.storage.com/annotators/custommodule__1.0.0__code.zip\n- data:\n  - https://module.storage.com/annotators/custommodule__1.0.0__data.zip\n</code></pre> <p>and used:</p> <pre><code>&gt;&gt;&gt; oakvar.api.store.register(\"custommodule\", url_file=\"url_file.yml\")\n</code></pre>"},{"location":"api/store/#oakvar.api.store.url","title":"url","text":"<pre><code>url(url='', outer=None)\n</code></pre> <p>Gets or sets the URL of the OakVar store.</p> PARAMETER  DESCRIPTION <code>url</code> <p>OakVar Store URL to use</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>str of the OakVar Store URL</p>"},{"location":"api/store_account/","title":"account","text":""},{"location":"api/store_account/#oakvar.api.store.account.change","title":"change","text":"<pre><code>change(newpw=None, outer=None)\n</code></pre> <p>Changes the password of an OakVar store account. You should be already logged in.</p> PARAMETER  DESCRIPTION <code>newpw</code> <p>New password</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p>"},{"location":"api/store_account/#oakvar.api.store.account.check","title":"check","text":"<pre><code>check(outer=None)\n</code></pre> <p>Checks if you are logged in to the OakVar store.</p> PARAMETER  DESCRIPTION <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if logged in. <code>False</code> if not.</p>"},{"location":"api/store_account/#oakvar.api.store.account.create","title":"create","text":"<pre><code>create(email=None, pw=None, pwconfirm=False, interactive=False, outer=None)\n</code></pre> <p>Creates an OakVar store account.</p> PARAMETER  DESCRIPTION <code>email</code> <p>Email of an OakVar store account</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pw</code> <p>Password of an OakVar store account</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pwconfirm</code> <p>Should be the same as <code>pw</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>interactive</code> <p>If <code>True</code> and <code>email</code> or <code>pw</code> is not given, missing fields will be interactvely received with prompts.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p>"},{"location":"api/store_account/#oakvar.api.store.account.delete","title":"delete","text":"<pre><code>delete(outer=None)\n</code></pre> <p>Deletes an OakVar store account. You should be already logged in.</p> PARAMETER  DESCRIPTION <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p>"},{"location":"api/store_account/#oakvar.api.store.account.reset","title":"reset","text":"<pre><code>reset(email, outer=None)\n</code></pre> <p>Sends a password reset email for an OakVar store account. You should be already logged in.</p> PARAMETER  DESCRIPTION <code>email</code> <p>Email of the logged in OakVar store account</p> <p> TYPE: <code>Optional[str]</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if successful. <code>False</code> if not.</p>"},{"location":"api/system/","title":"system","text":""},{"location":"api/system/#oakvar.api.system.check","title":"check","text":"<pre><code>check(outer=None)\n</code></pre> <p>Performs OakVar system checkup.</p> PARAMETER  DESCRIPTION <code>outer</code> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if all tests passed. False if not.</p>"},{"location":"api/system/#oakvar.api.system.md","title":"md","text":"<pre><code>md(directory=None)\n</code></pre> <p>Gets or sets OakVar modules directory.</p> PARAMETER  DESCRIPTION <code>directory</code> <p>Path to a new OakVar modules directory. If given, OakVar modules directory will be set to this value.</p> <p> TYPE: <code>Optional[Union[Path, str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[Path]</code> <p>Path of the new or existing OakVar modules directory. <code>None</code> if <code>directory</code> is not given and an OakVar modules directory is not defined in the system configuration.</p>"},{"location":"api/system/#oakvar.api.system.setup","title":"setup","text":"<pre><code>setup(clean=False, refresh_db=False, clean_cache_files=False, setup_file=None, email=None, pw=None, create_account=False, custom_system_conf=None, publish_time='', outer=None, system_worker_state=None, sg_mode=False)\n</code></pre> <p>setup.</p> PARAMETER  DESCRIPTION <code>clean</code> <p>Perform clean installation. Installed modules and analysis results are not erased.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>refresh_db</code> <p>Refreshes store server data.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clean_cache_files</code> <p>Cleans store cache files.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>setup_file</code> <p>Path to a custom system configuration file. If given, the system configuraton from this file will be used instead of default system configuratoin values.</p> <p> TYPE: <code>Optional[Union[Path, str]]</code> DEFAULT: <code>None</code> </p> <code>email</code> <p>OakVar store account Email</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pw</code> <p>OakVar store account password</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>custom_system_conf</code> <p>Custom system configuration as a Dict</p> <p> TYPE: <code>Optional[Dict]</code> DEFAULT: <code>None</code> </p> <code>publish_time</code> <p>publish_time</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>system_worker_state</code> <p> DEFAULT: <code>None</code> </p> <code>outer</code> <p> DEFAULT: <code>None</code> </p>"}]}